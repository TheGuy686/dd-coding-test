version: '3.8'
services:
  # ------------------- Redis CACHE START -------------------
  redis-cache:
    image: redis:7.2-alpine
    container_name: cache
    restart: always
    build:
      context: ./redis
      dockerfile: Dockerfile
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    privileged: true
    volumes:
      - ./redis/cache:/data
    networks:
      - default-web-server

  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=${REDIS_HOST}:${REDIS_PORT}
      - REDIS_PORT=${REDIS_PORT}
      - HTTP_USER=${REDIS_USER}
      - REDIS_HTTP_PASSWORD=${REDIS_PASSWORD}
    ports:
      - ${REDIS_UI_PORT}:${REDIS_UI_PORT}
    networks: 
      - default-web-server

  # ------------------- Redis CACHE END -------------------

  # ------------------- Database START -------------------
  db:
    image: mysql:latest
    container_name: mysql-container
    logging:
      options:
        max-size: 10m
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: user
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    restart: always
    networks:
      - default-web-server
    volumes:
      - ./apps/API/docs/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./:/var/www
      
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin-container
    restart: always
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - ${PHP_MYADMIN_PORT}:80
    links:
      - db
    networks:
      - default-web-server
    depends_on:
      - apache

  # ------------------- Database END -------------------

  # ------------------- Applications START -------------------
  backend:
    container_name: be
    restart: always
    build:
      args:
        user: be-user
        uid: 1000
      context: ./apps/API
      dockerfile: Dockerfile
    volumes:
      - ./apps/API:/var/www/html
      - .env:/var/www/html/.env
    depends_on:
      - db
      - apache
      - phpmyadmin
      - redis-cache
    networks:
      - default-web-server
    command: bash -c "php artisan migrate --force && php artisan db:seed --class=CustomersTableSeeder && php artisan serve --host=0.0.0.0 --port=${API_PORT}"

  frontend:
    container_name: fe
    restart: unless-stopped
    build:
      context: ./apps/FE
      dockerfile: Dockerfile
    volumes:
      - ./apps/FE:/usr/src/app
    depends_on:
      - backend
      - apache
    networks:
      - default-web-server

  # ------------------- Applications END -------------------

  apache:
    container_name: apache
    build:
      context: ./apache
      dockerfile: Dockerfile
    volumes:
      - ./apache/httpd.conf:/etc/apache2/httpd.conf
      - ./apache/deafult.conf:/etc/apache2/sites-available/000-default.conf
      - ./apps:/usr/local/apache2/htdocs
      - ./html:/var/www/html
    ports:
      - 80:80
      - 3000:80
      - 100:100
    restart: unless-stopped
    networks:
      - default-web-server

networks:
  default-web-server:
    driver: bridge

volumes:
  cache:
    driver: local